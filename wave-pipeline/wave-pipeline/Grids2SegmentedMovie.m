%% grids2SegmentedMovie.m

% Author: Sam Huguet 
% Author e-mail: samhuguet1@gmail.com

% Purpose: This is desiged to consider a folder of CV7000S multi-field 
% images, segment those of the H2B channel, then concatenate them into a 
% 3D stack (one which can be watched as a movie with FIJI). 

% Function inputs: 
% (1) Folder of CV7000S multi-field stiched images. 
% (2) You may also with to change the segmentation routine variables, though they are calibrated for reasonably accurate segmentation. 

% Function outputs: 
% (1) An individual movie of segmented fields. View this in FIJI or ImageJ.

%% Preamble 

% Clear the workspace and command window. 
clear
clc 

% Denote the H2B channel number as a two character string e.g. '02'. 
H2BChannel = '01';

%% Select the folder called 'Grids'. This contains all the unsegmented grids. 

gridsFolder = cell2mat(uipickfiles); % Select the files. 

wellFolders = dir(gridsFolder); % Get a list of all files and folders in this folder.
dirFlags = [wellFolders.isdir]; % Get a logical vector that tells which is a directory.
subFolders = wellFolders(dirFlags); % Extract only those that are directories.
wellDirectoryArray = cell(1,1); % Make a dataArray for storage of the wells.
for k = 1 : length(subFolders)
  if length(subFolders(k).name) < 3
    continue; 
  else 
      wellDirectoryArray(k,1) = {subFolders(k).name};
  end 
end
wellDirectoryArray = wellDirectoryArray(~cellfun('isempty',wellDirectoryArray)); % Remove empty cells and 'hey presto', you have all the subdirectories.

%% Begin looping to make the segmented 3D grids. 

% Loop through the dirrent folders pertaining to each well. 
for n = 1:length(wellDirectoryArray) 

    progress_N_Loop = (n/length(wellDirectoryArray))*100
    
    s1 = gridsFolder;
    s2 = '\';
    s3 = wellDirectoryArray{n};
    wellDirectory = strcat(s1, s2, s3); % Construct the current directory that we want.
    
    cd(wellDirectory); % Change the current directory to that pertaining to the current well. 
    
    % list all the files within the directory and filter them, to remove
    % any funny single character names (e.g. '.') which I've seen appear.
    folderStruc = dir(cd); % Load the struc of the folder.
    gridNames = {folderStruc.name};
    numberOfImages = size(gridNames);
    numberOfImages = numberOfImages(2);
    nameLength =  cellfun('length',gridNames);
    logicalRepresentation = nameLength > 3;

    % Here are the correct names, generated by the process above. 
    gridNames = gridNames(logicalRepresentation);
    numberOfGrids = numel(gridNames);

    %% Remove all images from our list which aren't of the desired channel. In this case, they should all be from the H2B channel.

    channelArray = cell(1,1); % Cell array to store information concerning well identity  

    gridNames = rot90(gridNames,3);% We need to rotate the name array for use later on. 

    for q=1:numberOfGrids
        % Extracting the first file name as a string. 
        Name = gridNames{q};

        % Extracting the well from the 'correctNames' string. 
        channel = Name(end-5:end-4);
        channel = {channel};
        channelArray(q,1) = channel; 
    end

    % We need to remove all names from the list which aren't of the red or
    % green channel. 
    x = ismember(channelArray, H2BChannel); % Flag the images of the H2B channel. 
    gridNames(~x) = []; % Remove non-H2B images.
    numberOfGrids = numel(gridNames); % The new number of grids having removed all the non-H2B ones. 
    
    % Make a blank array for concatenation later. 
    stack = [];
    
    %% Now we start looping through all the individual H2B grids. 
    for v = 3:numberOfGrids
        
        %% Image segmentation. 
        progress_V_Loop = (v/numberOfGrids)*100
        
        currentGridName = gridNames{v};
        currentGrid = imread(currentGridName); % Load in the grid name. 
        
        param.h_maxima          = 5;
        param.otsu_thresh_index = 1;
        param.otsu_coeff        = 1;
        param.size_threshold    = 200;
        param.method            = 'local_threshold';
        param.n_class           = 2;
        param.show              = 0;
        param.threshold_local   = 3;
        param.min_size_colony   = 10;
        param.DICE_threshold    = 0.5;

        segmented = segmentation_nucleus_v2(currentGrid,param); % segment
        segmented = segmented > 0;
        
        %% Once the image has been segmented, add it to a hyperstack for storage. 
        stack = cat(3, stack, segmented);
        
    end 
    
    % Save the image. 
    s1 = 'SegmentedMovie';
    s2 = '_';
    s3 = wellDirectoryArray{n};
    s4 = '.tif';
    outputFileName = strcat(s1, s2, s3, s4); % Construct the current directory that we want.
    
    for k=1:length(stack(1, 1, :))
        progress_K_Loop = (k/length(stack(1, 1, :)))*100
        imwrite(stack(:, :, k), outputFileName, 'WriteMode', 'append',  'Compression','none');
    end 
    
end 





